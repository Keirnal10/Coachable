name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        npm install
        cd apps/api && npm install
        cd ../web && npm install
    
    - name: Run API Type Check
      working-directory: ./apps/api
      run: npm run type-check
    
    - name: Run Web Type Check
      working-directory: ./apps/web
      run: npm run type-check
    
    - name: Run API Lint
      working-directory: ./apps/api
      run: npm run lint
    
    - name: Run Web Lint
      working-directory: ./apps/web
      run: npm run lint
    
    - name: Run API Tests
      working-directory: ./apps/api
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/coachable_test
        NODE_ENV: test
        JWT_SECRET: test-secret
    
    - name: Run Web Tests
      working-directory: ./apps/web
      run: npm test
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001
    
    - name: Upload API Coverage
      uses: actions/upload-artifact@v4
      with:
        name: api-coverage
        path: apps/api/coverage
    
    - name: Upload Web Coverage
      uses: actions/upload-artifact@v4
      with:
        name: web-coverage
        path: apps/web/coverage

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        npm install
        cd apps/api && npm install
        cd ../web && npm install
    
    - name: Build API
      working-directory: ./apps/api
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NODE_ENV: production
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
    
    - name: Build Web
      working-directory: ./apps/web
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
    
    - name: Deploy API
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /var/www/coachable/api
          git pull origin main
          npm install --production
          npm run build
          pm2 restart coachable-api || pm2 start dist/server.js --name coachable-api
          pm2 save
    
    - name: Deploy Web
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /var/www/coachable/web
          git pull origin main
          npm install --production
          npm run build
          pm2 restart coachable-web || pm2 start npm --name coachable-web -- start
          pm2 save
    
    - name: Verify API Deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          if ! pm2 list | grep -q "coachable-api"; then
            echo "API deployment failed"
            exit 1
          fi
    
    - name: Verify Web Deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          if ! pm2 list | grep -q "coachable-web"; then
            echo "Web deployment failed"
            exit 1
          fi 